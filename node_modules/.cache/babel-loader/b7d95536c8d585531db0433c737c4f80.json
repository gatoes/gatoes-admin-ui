{"ast":null,"code":"// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import { reduxForm, Field, SubmissionError, reset, FieldArray } from 'redux-form';\n// import renderFieldLabelTransition from '../FormFields/renderFieldLabelTransition';\n// import renderField from '../FormFields/renderField';\n// import renderReactSelect from '../FormFields/renderReactSelect';\n// import {toast} from 'react-toastify';\n// import validate from './ValidateForm';\n// import { addCommunicationType, communicationTypeDetailById } from '../../actions/communication';\n// import {NOTIFICATION_TYPE, NOTIFICATION_USER, API_ROOT} from '../../constants';\n// import RenderZoneOptoin from './RenderZoneOptoin';\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import CSVReader from 'react-csv-reader';\n// //import ShopCategoryImage from '../shops/ShopCategoryImage';\n// //import { Editor } from '@tinymce/tinymce-react';\n// import MessageEditor from \"../common/MessageEditor\";\n// import moment from 'moment';\n// import ShopImage from '../shops/ShopImage';\n\n// class EditCommunicationMedium extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       userType : 0,\n//       isSchedule: false,\n//       isCsv: false,\n//       csv_records:[],\n//       inbox: 0, \n//       msg: '',\n//       minTime: null,\n//       itemImageUrl : null\n//     }\n//     this.handleUserType = this.handleUserType.bind(this);\n//     this.handleChangeStart = this.handleChangeStart.bind(this);\n//     this.handleSchedule = this.handleSchedule.bind(this);\n//     this.handleForce = this.handleForce.bind(this);\n//     this.handleCsvUpload = this.handleCsvUpload.bind(this);\n//     //this.getImage = this.getImage.bind(this);\n//     //this.handleEditorChange = this.handleEditorChange.bind(this);\n//     this.handleNotificationType = this.handleNotificationType.bind(this);\n//     this.getMessage = this.getMessage.bind(this);\n//     this.getShopImage = this.getShopImage.bind(this);\n//   }\n\n//   componentDidMount(){\n//     this.setState({\n//       minTime : this.calculateMinTime(new Date())\n//     })\n//   }\n\n//   calculateMinTime = date => {\n//     let isToday = moment(date).isSame(moment(), 'day');\n//     if (isToday) {\n//         let nowAddOneHour = moment(new Date()).add({hours: 1}).toDate();\n//         return nowAddOneHour;\n//     }\n//     return moment().startOf('day').toDate(); // set to 12:00 am today\n//   }\n\n//   getMessage(message){\n//     this.props.change('message', message);\n//   }\n\n//   // handleEditorChange(e){\n//   //   //console.log('aaaaaa', e.target.getContent());\n//   //   this.props.change('message', e.target.getContent());\n//   // }\n\n//   // getImage(imageId){\n//   //   this.props.change('image', imageId);\n//   // }\n\n//   handleUserType(e){\n//     if(e.value == 1 || e.value == 2){\n//       this.setState({\n//         userType : 1\n//       })\n//     } else {\n//       this.setState({\n//         userType : 0\n//       })\n//     }\n//   }\n\n//   handleNotificationType(e){\n//     if(e.value == 1){\n//       this.setState({\n//         inbox : 1\n//       })\n//     } else {\n//       this.setState({\n//         inbox : 0\n//       })\n//     }\n//   }\n\n//   handleSchedule(e){\n//     this.setState({\n//       isSchedule: !this.state.isSchedule\n//     });\n//   }\n\n//   handleCsvUpload(e){\n//     this.setState({\n//       isCsv: !this.state.isCsv\n//     });\n//   }\n\n//   handleForce(data){\n//     this.setState({\n//       csv_records: data.flat()\n//     });\n//     this.props.change('csv_records', this.state.csv_records);\n//   }\n\n//   // handleChangeStart(sdate){\n//   //   // this.setState({\n//   //   //   startDate: sdate\n//   //   // });\n//   //   let isToday = moment(sdate).isSame(moment(), 'day');\n//   //   this.setState({\n//   //     startDate: sdate,\n//   //     minTime: isToday ? this.calculateMinTime(new Date()) : moment().startOf('day').toDate()\n//   //   });\n//   //   this.props.change('scheduled_time', sdate); \n//   // }\n\n//   handleChangeStart(sdate) {\n//     console.log('Selected date:', sdate); // Debugging line\n\n//     if (!sdate || isNaN(new Date(sdate))) {\n//       console.error('Invalid date selected:', sdate); // Error logging\n//       return;\n//     }\n\n//     let isToday = moment(sdate).isSame(moment(), 'day');\n//     this.setState({\n//       startDate: sdate,\n//       minTime: isToday ? this.calculateMinTime(new Date()) : moment().startOf('day').toDate()\n//     });\n//     this.props.change('scheduled_time', sdate); \n//   }\n\n//   componentWillMount(){\n//     communicationTypeDetailById({id : this.props.match.params.index}).then((response) => {\n//       this.props.initialize(response.data.data);\n//       if(response.data.data.is_scheduled && response.data.data.is_scheduled === true){\n//         this.props.change('scheduled_time', response.data.data.scheduled_time);\n//         this.setState({\n//           isSchedule: true,\n//           startDate: response.data.data.scheduled_time,\n//           msg: response.data.data.message ? response.data.data.message : null,\n//           itemImageUrl: response.data.data.imageUrl && response.data.data.imageUrl.thumbnail ? response.data.data.imageUrl.thumbnail : null\n//         });\n//       }\n\n//       this.setState({\n//         itemImageUrl: response.data.data.imageUrl && response.data.data.imageUrl.thumbnail ? response.data.data.imageUrl.thumbnail : null\n//       });\n\n//       this.props.change('image', response.data.data.image);\n\n//       if(response.data.data.upload_csv && response.data.data.upload_csv === true){\n//         this.setState({\n//           isCsv: true\n//         });\n//       }\n//       if((response.data.data.send_inbox && response.data.data.send_inbox === true) || (response.data.data.notificationType && response.data.data.notificationType == \"1\")){\n//         this.setState({\n//           inbox: 1\n//         });\n//       }\n//       this.setState({\n//         msg: response.data.data.message ? response.data.data.message : null\n//       });\n//     });\n//   }\n\n//   submitMessageForm(values){\n//     //console.log('values', values);\n//     return addCommunicationType(values)\n//     .then((result) => {\n//       toast.success('Message setup added Successfully.');\n//       this.props.reset();\n//       this.props.history.push('/dashboard/managecommunicationmedium');\n//     }).catch(error => {\n//       //throw new SubmissionError(error.response.data.error);\n//     })\n//   }\n\n//   getShopImage(imageId){\n//     this.props.change('image', imageId);\n//   }\n\n//   render() {\n//     const {handleSubmit, pristine, submitting} = this.props;\n//     const {userType, inbox, msg, itemImageUrl} = this.state;\n//     console.log('isSchedule', itemImageUrl);\n\n//     return (\n//       <div className=\"container ani-ui-block shop-manager\">\n//         <div className=\"row menu-top-block\">\n//           <div className=\"col-sm-12 tl-block align-self-center\">\n//             <h4 className=\"heading\">Edit Communication Type</h4>\n//           </div>\n\n//           <form onSubmit={handleSubmit(this.submitMessageForm.bind(this))}>\n//             <div className=\"row\">\n//               <div className=\"col-lg-12 col-md-12\">\n//                 <div className=\"add-left-block\">\n\n//                   <div className=\"fields-ui-block\">\n//                     <div className=\"basic-details\">\n//                       <div className=\"heading\">\n//                         <h4>Details</h4>\n//                       </div>\n//                       <div className=\"form-block promocode-ui\">\n//                         <div className=\"row\">\n//                           <div className=\"col-lg-12\">\n//                             <Field\n//                               name=\"subject\"\n//                               component={renderField}\n//                               type=\"text\"\n//                               className=\"form-control\"\n//                               label=\"Subject\"\n//                               placeholder=\"Eg. welcome\"\n//                             />\n//                           </div>\n//                         </div>\n\n//                         {\n//                           this.state.msg\n//                           ?\n//                           <MessageEditor getMessage={this.getMessage} msg={msg} />\n//                           :\n//                           null\n//                         }\n\n//                         <div className=\"row\">\n//                           <div className=\"col-lg-6 selectbox-block\">\n//                             <Field\n//                               label=\"Notification User\"\n//                               name='notificationUser'\n//                               options={NOTIFICATION_USER}\n//                               component={renderReactSelect}\n//                               placeholder=\"Select Type\"\n//                               multi={false}\n//                               parentCallback={ this.handleUserType }\n//                               parentDivClass=\"form-group w-100\"\n//                             />\n//                           </div>\n//                           <div className=\"col-lg-6 selectbox-block\">\n//                             <Field\n//                               label=\"Notification Type\"\n//                               name='notificationType'\n//                               options={NOTIFICATION_TYPE}\n//                               component={renderReactSelect}\n//                               placeholder=\"Select Type\"\n//                               multi={false}\n//                               parentDivClass=\"form-group w-100\"\n//                               parentCallback={ this.handleNotificationType }\n//                             />\n//                           </div>\n//                         </div>\n\n//                         <FieldArray name=\"zone\" userType={userType} component={RenderZoneOptoin} formProps = {this.props.formProps} />\n//                         <div className=\"row\">\n//                           {\n//                             inbox\n//                             ?\n//                             <div className=\"form-group ri-block col-lg-6\">\n//                               <ul className=\"cs-check-box\">\n//                                 <li>\n//                                   <div className=\"os-check-box\">\n//                                     <Field\n//                                       name=\"send_inbox\"\n//                                       id=\"send_inbox\"\n//                                       component=\"input\"\n//                                       type=\"checkbox\"\n//                                     />\n//                                     <label for=\"send_inbox\">Send to Inbox?</label>\n//                                   </div>\n//                                 </li>\n//                               </ul>\n//                             </div>\n//                             :\n//                             null\n//                           }\n//                           <div className=\"form-group ri-block col-lg-6\">\n//                             <ul className=\"cs-check-box\">\n//                               <li>\n//                                 <div className=\"os-check-box\">\n//                                   <Field\n//                                     name=\"is_scheduled\"\n//                                     id=\"promocode_other\"\n//                                     component=\"input\"\n//                                     type=\"checkbox\"\n//                                     onClick={ this.handleSchedule }\n//                                   />\n//                                   <label for=\"promocode_other\">Scheduled ?</label>\n//                                 </div>\n//                               </li>\n//                             </ul>\n//                           </div>\n\n//                           {\n//                             this.state.isSchedule === true\n//                             ?\n//                             <div className=\"col-lg-12\">\n//                               <div className=\"form-group\">\n//                                 <DatePicker\n//                                   name=\"start_date\"\n//                                   selected={this.state.startDate}\n//                                   selectsStart\n//                                   startDate={this.state.startDate}\n//                                   endDate={this.state.endDate}\n//                                   onChange={this.handleChangeStart}\n//                                   minDate={new Date()}\n//                                   minTime={this.state.minTime}\n//                                   maxTime={moment().endOf('day').toDate()}\n//                                   showTimeSelect\n//                                   timeFormat=\"HH:mm\"\n//                                   timeIntervals={15}\n//                                   dateFormat=\"yyyy-MM-dd h:mm aa\"\n//                                   timeCaption=\"time\"\n//                                   placeholderText=\"Choose scheduled time\"\n//                                 />\n//                                 </div>\n//                             </div>\n//                             :\n//                             null\n//                           }\n//                         </div>\n\n//                         <div className=\"row\">\n\n//                           <div className=\"form-group ri-block col-lg-6\">\n//                             <ul className=\"cs-check-box\">\n//                               <li>\n//                                 <div className=\"os-check-box\">\n//                                   <Field\n//                                     name=\"upload_csv\"\n//                                     id=\"upload_csv\"\n//                                     component=\"input\"\n//                                     type=\"checkbox\"\n//                                     onClick={ this.handleCsvUpload }\n//                                   />\n//                                   <label for=\"upload_csv\">Upload user type CSV?</label>\n//                                 </div>\n//                               </li>\n//                             </ul>\n//                           </div>\n//                         </div>\n\n//                         {\n//                           this.state.isCsv === true\n//                           ?\n//                           <div className=\"row\">\n//                             <CSVReader\n//                               cssClass=\"react-csv-input\"\n//                               label=\"Upload CSV\"\n//                               onFileLoaded={this.handleForce}\n//                             />\n//                             <Field\n//                               name=\"csv\"\n//                               component={renderField}\n//                               type=\"hidden\"\n//                             />\n//                           </div>\n//                           :\n//                           null\n//                         }\n//                       </div>\n//                     </div>\n//                   </div>\n//                   {/*\n//                   <div className=\"row\">\n//                     <div className=\"col-lg-12 col-md-12 order-lg-2\">\n//                       <ShopCategoryImage getImage={this.getImage} />\n//                       <Field\n//                         name=\"catimage\"\n//                         component={renderField}\n//                         type=\"hidden\"\n//                         className=\"form-control\"\n//                         label=\"Name\"\n//                         placeholder=\"Eg. Healthy\"\n//                       />\n//                     </div>\n//                   </div>\n//                 */}\n\n//                   <div className=\"col-lg-12 col-md-12\">\n//                     <ShopImage getShopImage={this.getShopImage} itemImageUrl={this.state.itemImageUrl} />\n//                   </div>\n\n//                   <div className=\"row save-button-block\">\n//                     <div className=\"col-sm-12 align-self-center\">\n//                       <button type=\"submit\" disabled={submitting} className=\"btn green-btn\">Submit details{submitting && <i className=\"fa fa-spinner fa-spin\"></i>}</button>\n//                     </div>\n//                   </div>\n\n//                 </div>\n//               </div>\n//             </div>\n\n//           </form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// EditCommunicationMedium = reduxForm({\n//   form: 'EditCommunicationMediumValue',\n//   destroyOnUnmount: true,\n//   enableReinitialize: true,\n//   keepDirtyOnReinitialize: true,\n//   validate\n// })(EditCommunicationMedium)\n\n// export default EditCommunicationMedium;","map":{"version":3,"names":[],"sources":["/home/hardik/gatoes-admin-ui/src/components/communication/EditCommunicationMedium.js"],"sourcesContent":["// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import { reduxForm, Field, SubmissionError, reset, FieldArray } from 'redux-form';\n// import renderFieldLabelTransition from '../FormFields/renderFieldLabelTransition';\n// import renderField from '../FormFields/renderField';\n// import renderReactSelect from '../FormFields/renderReactSelect';\n// import {toast} from 'react-toastify';\n// import validate from './ValidateForm';\n// import { addCommunicationType, communicationTypeDetailById } from '../../actions/communication';\n// import {NOTIFICATION_TYPE, NOTIFICATION_USER, API_ROOT} from '../../constants';\n// import RenderZoneOptoin from './RenderZoneOptoin';\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import CSVReader from 'react-csv-reader';\n// //import ShopCategoryImage from '../shops/ShopCategoryImage';\n// //import { Editor } from '@tinymce/tinymce-react';\n// import MessageEditor from \"../common/MessageEditor\";\n// import moment from 'moment';\n// import ShopImage from '../shops/ShopImage';\n\n// class EditCommunicationMedium extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       userType : 0,\n//       isSchedule: false,\n//       isCsv: false,\n//       csv_records:[],\n//       inbox: 0, \n//       msg: '',\n//       minTime: null,\n//       itemImageUrl : null\n//     }\n//     this.handleUserType = this.handleUserType.bind(this);\n//     this.handleChangeStart = this.handleChangeStart.bind(this);\n//     this.handleSchedule = this.handleSchedule.bind(this);\n//     this.handleForce = this.handleForce.bind(this);\n//     this.handleCsvUpload = this.handleCsvUpload.bind(this);\n//     //this.getImage = this.getImage.bind(this);\n//     //this.handleEditorChange = this.handleEditorChange.bind(this);\n//     this.handleNotificationType = this.handleNotificationType.bind(this);\n//     this.getMessage = this.getMessage.bind(this);\n//     this.getShopImage = this.getShopImage.bind(this);\n//   }\n\n//   componentDidMount(){\n//     this.setState({\n//       minTime : this.calculateMinTime(new Date())\n//     })\n//   }\n\n//   calculateMinTime = date => {\n//     let isToday = moment(date).isSame(moment(), 'day');\n//     if (isToday) {\n//         let nowAddOneHour = moment(new Date()).add({hours: 1}).toDate();\n//         return nowAddOneHour;\n//     }\n//     return moment().startOf('day').toDate(); // set to 12:00 am today\n//   }\n\n//   getMessage(message){\n//     this.props.change('message', message);\n//   }\n\n//   // handleEditorChange(e){\n//   //   //console.log('aaaaaa', e.target.getContent());\n//   //   this.props.change('message', e.target.getContent());\n//   // }\n\n//   // getImage(imageId){\n//   //   this.props.change('image', imageId);\n//   // }\n\n//   handleUserType(e){\n//     if(e.value == 1 || e.value == 2){\n//       this.setState({\n//         userType : 1\n//       })\n//     } else {\n//       this.setState({\n//         userType : 0\n//       })\n//     }\n//   }\n\n//   handleNotificationType(e){\n//     if(e.value == 1){\n//       this.setState({\n//         inbox : 1\n//       })\n//     } else {\n//       this.setState({\n//         inbox : 0\n//       })\n//     }\n//   }\n\n//   handleSchedule(e){\n//     this.setState({\n//       isSchedule: !this.state.isSchedule\n//     });\n//   }\n\n//   handleCsvUpload(e){\n//     this.setState({\n//       isCsv: !this.state.isCsv\n//     });\n//   }\n\n//   handleForce(data){\n//     this.setState({\n//       csv_records: data.flat()\n//     });\n//     this.props.change('csv_records', this.state.csv_records);\n//   }\n  \n//   // handleChangeStart(sdate){\n//   //   // this.setState({\n//   //   //   startDate: sdate\n//   //   // });\n//   //   let isToday = moment(sdate).isSame(moment(), 'day');\n//   //   this.setState({\n//   //     startDate: sdate,\n//   //     minTime: isToday ? this.calculateMinTime(new Date()) : moment().startOf('day').toDate()\n//   //   });\n//   //   this.props.change('scheduled_time', sdate); \n//   // }\n\n//   handleChangeStart(sdate) {\n//     console.log('Selected date:', sdate); // Debugging line\n  \n//     if (!sdate || isNaN(new Date(sdate))) {\n//       console.error('Invalid date selected:', sdate); // Error logging\n//       return;\n//     }\n  \n//     let isToday = moment(sdate).isSame(moment(), 'day');\n//     this.setState({\n//       startDate: sdate,\n//       minTime: isToday ? this.calculateMinTime(new Date()) : moment().startOf('day').toDate()\n//     });\n//     this.props.change('scheduled_time', sdate); \n//   }\n  \n\n//   componentWillMount(){\n//     communicationTypeDetailById({id : this.props.match.params.index}).then((response) => {\n//       this.props.initialize(response.data.data);\n//       if(response.data.data.is_scheduled && response.data.data.is_scheduled === true){\n//         this.props.change('scheduled_time', response.data.data.scheduled_time);\n//         this.setState({\n//           isSchedule: true,\n//           startDate: response.data.data.scheduled_time,\n//           msg: response.data.data.message ? response.data.data.message : null,\n//           itemImageUrl: response.data.data.imageUrl && response.data.data.imageUrl.thumbnail ? response.data.data.imageUrl.thumbnail : null\n//         });\n//       }\n\n//       this.setState({\n//         itemImageUrl: response.data.data.imageUrl && response.data.data.imageUrl.thumbnail ? response.data.data.imageUrl.thumbnail : null\n//       });\n      \n//       this.props.change('image', response.data.data.image);\n\n//       if(response.data.data.upload_csv && response.data.data.upload_csv === true){\n//         this.setState({\n//           isCsv: true\n//         });\n//       }\n//       if((response.data.data.send_inbox && response.data.data.send_inbox === true) || (response.data.data.notificationType && response.data.data.notificationType == \"1\")){\n//         this.setState({\n//           inbox: 1\n//         });\n//       }\n//       this.setState({\n//         msg: response.data.data.message ? response.data.data.message : null\n//       });\n//     });\n//   }\n\n//   submitMessageForm(values){\n//     //console.log('values', values);\n//     return addCommunicationType(values)\n//     .then((result) => {\n//       toast.success('Message setup added Successfully.');\n//       this.props.reset();\n//       this.props.history.push('/dashboard/managecommunicationmedium');\n//     }).catch(error => {\n//       //throw new SubmissionError(error.response.data.error);\n//     })\n//   }\n\n//   getShopImage(imageId){\n//     this.props.change('image', imageId);\n//   }\n\n//   render() {\n//     const {handleSubmit, pristine, submitting} = this.props;\n//     const {userType, inbox, msg, itemImageUrl} = this.state;\n//     console.log('isSchedule', itemImageUrl);\n    \n//     return (\n//       <div className=\"container ani-ui-block shop-manager\">\n//         <div className=\"row menu-top-block\">\n//           <div className=\"col-sm-12 tl-block align-self-center\">\n//             <h4 className=\"heading\">Edit Communication Type</h4>\n//           </div>\n\n//           <form onSubmit={handleSubmit(this.submitMessageForm.bind(this))}>\n//             <div className=\"row\">\n//               <div className=\"col-lg-12 col-md-12\">\n//                 <div className=\"add-left-block\">\n                  \n//                   <div className=\"fields-ui-block\">\n//                     <div className=\"basic-details\">\n//                       <div className=\"heading\">\n//                         <h4>Details</h4>\n//                       </div>\n//                       <div className=\"form-block promocode-ui\">\n//                         <div className=\"row\">\n//                           <div className=\"col-lg-12\">\n//                             <Field\n//                               name=\"subject\"\n//                               component={renderField}\n//                               type=\"text\"\n//                               className=\"form-control\"\n//                               label=\"Subject\"\n//                               placeholder=\"Eg. welcome\"\n//                             />\n//                           </div>\n//                         </div>\n\n//                         {\n//                           this.state.msg\n//                           ?\n//                           <MessageEditor getMessage={this.getMessage} msg={msg} />\n//                           :\n//                           null\n//                         }\n\n//                         <div className=\"row\">\n//                           <div className=\"col-lg-6 selectbox-block\">\n//                             <Field\n//                               label=\"Notification User\"\n//                               name='notificationUser'\n//                               options={NOTIFICATION_USER}\n//                               component={renderReactSelect}\n//                               placeholder=\"Select Type\"\n//                               multi={false}\n//                               parentCallback={ this.handleUserType }\n//                               parentDivClass=\"form-group w-100\"\n//                             />\n//                           </div>\n//                           <div className=\"col-lg-6 selectbox-block\">\n//                             <Field\n//                               label=\"Notification Type\"\n//                               name='notificationType'\n//                               options={NOTIFICATION_TYPE}\n//                               component={renderReactSelect}\n//                               placeholder=\"Select Type\"\n//                               multi={false}\n//                               parentDivClass=\"form-group w-100\"\n//                               parentCallback={ this.handleNotificationType }\n//                             />\n//                           </div>\n//                         </div>\n\n//                         <FieldArray name=\"zone\" userType={userType} component={RenderZoneOptoin} formProps = {this.props.formProps} />\n//                         <div className=\"row\">\n//                           {\n//                             inbox\n//                             ?\n//                             <div className=\"form-group ri-block col-lg-6\">\n//                               <ul className=\"cs-check-box\">\n//                                 <li>\n//                                   <div className=\"os-check-box\">\n//                                     <Field\n//                                       name=\"send_inbox\"\n//                                       id=\"send_inbox\"\n//                                       component=\"input\"\n//                                       type=\"checkbox\"\n//                                     />\n//                                     <label for=\"send_inbox\">Send to Inbox?</label>\n//                                   </div>\n//                                 </li>\n//                               </ul>\n//                             </div>\n//                             :\n//                             null\n//                           }\n//                           <div className=\"form-group ri-block col-lg-6\">\n//                             <ul className=\"cs-check-box\">\n//                               <li>\n//                                 <div className=\"os-check-box\">\n//                                   <Field\n//                                     name=\"is_scheduled\"\n//                                     id=\"promocode_other\"\n//                                     component=\"input\"\n//                                     type=\"checkbox\"\n//                                     onClick={ this.handleSchedule }\n//                                   />\n//                                   <label for=\"promocode_other\">Scheduled ?</label>\n//                                 </div>\n//                               </li>\n//                             </ul>\n//                           </div>\n\n//                           {\n//                             this.state.isSchedule === true\n//                             ?\n//                             <div className=\"col-lg-12\">\n//                               <div className=\"form-group\">\n//                                 <DatePicker\n//                                   name=\"start_date\"\n//                                   selected={this.state.startDate}\n//                                   selectsStart\n//                                   startDate={this.state.startDate}\n//                                   endDate={this.state.endDate}\n//                                   onChange={this.handleChangeStart}\n//                                   minDate={new Date()}\n//                                   minTime={this.state.minTime}\n//                                   maxTime={moment().endOf('day').toDate()}\n//                                   showTimeSelect\n//                                   timeFormat=\"HH:mm\"\n//                                   timeIntervals={15}\n//                                   dateFormat=\"yyyy-MM-dd h:mm aa\"\n//                                   timeCaption=\"time\"\n//                                   placeholderText=\"Choose scheduled time\"\n//                                 />\n//                                 </div>\n//                             </div>\n//                             :\n//                             null\n//                           }\n//                         </div>\n\n\n//                         <div className=\"row\">\n                          \n//                           <div className=\"form-group ri-block col-lg-6\">\n//                             <ul className=\"cs-check-box\">\n//                               <li>\n//                                 <div className=\"os-check-box\">\n//                                   <Field\n//                                     name=\"upload_csv\"\n//                                     id=\"upload_csv\"\n//                                     component=\"input\"\n//                                     type=\"checkbox\"\n//                                     onClick={ this.handleCsvUpload }\n//                                   />\n//                                   <label for=\"upload_csv\">Upload user type CSV?</label>\n//                                 </div>\n//                               </li>\n//                             </ul>\n//                           </div>\n//                         </div>\n\n//                         {\n//                           this.state.isCsv === true\n//                           ?\n//                           <div className=\"row\">\n//                             <CSVReader\n//                               cssClass=\"react-csv-input\"\n//                               label=\"Upload CSV\"\n//                               onFileLoaded={this.handleForce}\n//                             />\n//                             <Field\n//                               name=\"csv\"\n//                               component={renderField}\n//                               type=\"hidden\"\n//                             />\n//                           </div>\n//                           :\n//                           null\n//                         }\n//                       </div>\n//                     </div>\n//                   </div>\n//                   {/*\n//                   <div className=\"row\">\n//                     <div className=\"col-lg-12 col-md-12 order-lg-2\">\n//                       <ShopCategoryImage getImage={this.getImage} />\n//                       <Field\n//                         name=\"catimage\"\n//                         component={renderField}\n//                         type=\"hidden\"\n//                         className=\"form-control\"\n//                         label=\"Name\"\n//                         placeholder=\"Eg. Healthy\"\n//                       />\n//                     </div>\n//                   </div>\n//                 */}\n\n//                   <div className=\"col-lg-12 col-md-12\">\n//                     <ShopImage getShopImage={this.getShopImage} itemImageUrl={this.state.itemImageUrl} />\n//                   </div>\n                  \n//                   <div className=\"row save-button-block\">\n//                     <div className=\"col-sm-12 align-self-center\">\n//                       <button type=\"submit\" disabled={submitting} className=\"btn green-btn\">Submit details{submitting && <i className=\"fa fa-spinner fa-spin\"></i>}</button>\n//                     </div>\n//                   </div>\n                    \n//                 </div>\n//               </div>\n//             </div>\n\n            \n//           </form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// EditCommunicationMedium = reduxForm({\n//   form: 'EditCommunicationMediumValue',\n//   destroyOnUnmount: true,\n//   enableReinitialize: true,\n//   keepDirtyOnReinitialize: true,\n//   validate\n// })(EditCommunicationMedium)\n\n// export default EditCommunicationMedium;\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}