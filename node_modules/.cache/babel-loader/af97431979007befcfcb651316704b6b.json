{"ast":null,"code":"var validateRegion = function validateRegion(values) {\n  console.log('values', values);\n  var errors = {};\n  if (!values.name || values.name.trim() === '') {\n    errors.name = 'Enter name';\n  }\n  if (!values.city_chk || values.city_chk <= 0) {\n    errors.city_chk = 'Choose city';\n  }\n  // if (!values.state_chk || values.state_chk <= 0) {\n  //   errors.state_chk = 'Choose State';\n  // }\n  if (!values.mapAddress_chk || values.mapAddress_chk === '') {\n    errors.mapAddress_chk = 'Enter city map address';\n  }\n  if (!values.regionCoordinates || values.regionCoordinates === '') {\n    errors.regionCoordinates = 'Mark your geofence first';\n  }\n  if (!values.serviceOpeningTime || values.serviceOpeningTime < 0) {\n    errors.serviceOpeningTime = 'Choose service start time';\n  } else if (!values.serviceClosingTime || values.serviceClosingTime <= 0) {\n    errors.serviceClosingTime = 'Choose service closing time';\n  } else if (parseInt(values.serviceOpeningTime) > parseInt(values.serviceClosingTime)) {\n    errors.serviceOpeningTime = 'Service start time can not be greater than service end time';\n  }\n  return errors;\n};\nexport default validateRegion;","map":{"version":3,"names":["validateRegion","values","console","log","errors","name","trim","city_chk","mapAddress_chk","regionCoordinates","serviceOpeningTime","serviceClosingTime","parseInt"],"sources":["/home/hardik/gatoes-admin-ui/src/components/regions/validateRegion.js"],"sourcesContent":["const validateRegion = values => {\n \n  console.log('values', values);\n\n  const errors = {};\n  if (!values.name || values.name.trim() === '') {\n    errors.name = 'Enter name';\n  }\n  if (!values.city_chk || values.city_chk <= 0) {\n    errors.city_chk = 'Choose city';\n  }\n  // if (!values.state_chk || values.state_chk <= 0) {\n  //   errors.state_chk = 'Choose State';\n  // }\n  if (!values.mapAddress_chk || values.mapAddress_chk === '') {\n    errors.mapAddress_chk = 'Enter city map address';\n  }\n  if (!values.regionCoordinates || values.regionCoordinates === '') {\n    errors.regionCoordinates = 'Mark your geofence first';\n  }\n  if (!values.serviceOpeningTime || values.serviceOpeningTime < 0) {\n    errors.serviceOpeningTime = 'Choose service start time';\n  } else if (!values.serviceClosingTime || values.serviceClosingTime <= 0) {\n    errors.serviceClosingTime = 'Choose service closing time';\n  } else if(parseInt(values.serviceOpeningTime) > parseInt(values.serviceClosingTime)){\n    errors.serviceOpeningTime = 'Service start time can not be greater than service end time';\n  }\n  return errors;\n}\nexport default validateRegion;"],"mappings":"AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAcA,CAAGC,MAAM,EAAI;EAE/BC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC;EAE7B,IAAMG,MAAM,GAAG,CAAC,CAAC;EACjB,IAAI,CAACH,MAAM,CAACI,IAAI,IAAIJ,MAAM,CAACI,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC7CF,MAAM,CAACC,IAAI,GAAG,YAAY;EAC5B;EACA,IAAI,CAACJ,MAAM,CAACM,QAAQ,IAAIN,MAAM,CAACM,QAAQ,IAAI,CAAC,EAAE;IAC5CH,MAAM,CAACG,QAAQ,GAAG,aAAa;EACjC;EACA;EACA;EACA;EACA,IAAI,CAACN,MAAM,CAACO,cAAc,IAAIP,MAAM,CAACO,cAAc,KAAK,EAAE,EAAE;IAC1DJ,MAAM,CAACI,cAAc,GAAG,wBAAwB;EAClD;EACA,IAAI,CAACP,MAAM,CAACQ,iBAAiB,IAAIR,MAAM,CAACQ,iBAAiB,KAAK,EAAE,EAAE;IAChEL,MAAM,CAACK,iBAAiB,GAAG,0BAA0B;EACvD;EACA,IAAI,CAACR,MAAM,CAACS,kBAAkB,IAAIT,MAAM,CAACS,kBAAkB,GAAG,CAAC,EAAE;IAC/DN,MAAM,CAACM,kBAAkB,GAAG,2BAA2B;EACzD,CAAC,MAAM,IAAI,CAACT,MAAM,CAACU,kBAAkB,IAAIV,MAAM,CAACU,kBAAkB,IAAI,CAAC,EAAE;IACvEP,MAAM,CAACO,kBAAkB,GAAG,6BAA6B;EAC3D,CAAC,MAAM,IAAGC,QAAQ,CAACX,MAAM,CAACS,kBAAkB,CAAC,GAAGE,QAAQ,CAACX,MAAM,CAACU,kBAAkB,CAAC,EAAC;IAClFP,MAAM,CAACM,kBAAkB,GAAG,6DAA6D;EAC3F;EACA,OAAON,MAAM;AACf,CAAC;AACD,eAAeJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}