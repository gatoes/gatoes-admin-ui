{"ast":null,"code":"import _toConsumableArray from \"/home/hardik/gatoes-admin-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/hardik/gatoes-admin-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { _dispatch, CITY_LIST_SUCCESS, REGION_LIST_SUCCESS, REGION_DELETE_SUCCESS, DELIVERY_REGION_LIST_SUCCESS, ADD_NEW_GEOFENCE_SUCCESS, UPDATE_GEOFENCE_SUCCESS, BUSINESS_ZONE_LIST_SUCCESS, ADD_BUSINESS_ZONE_SUCCESS, UPDATE_BUSINESS_ZONE_SUCCESS, BUSINESS_ZONE_DELETE_SUCCESS } from '../actions/regions';\nvar INITIAL_STATE = {\n  status: null,\n  city_list: [],\n  region_list: {},\n  delivery_region_list: [],\n  business_zone_list: []\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CITY_LIST_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        city_list: action.payload\n      }), true, 'citylist');\n      break;\n    case REGION_LIST_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        region_list: action.payload\n      }), true, 'regionlist');\n      break;\n    case DELIVERY_REGION_LIST_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        delivery_region_list: action.payload\n      }), true, 'deliveryregionlist');\n      break;\n    case ADD_NEW_GEOFENCE_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        delivery_region_list: [].concat(_toConsumableArray(state.delivery_region_list), [action.payload])\n      }), true, 'deliveryregionlist');\n      break;\n    case UPDATE_GEOFENCE_SUCCESS:\n      return function () {\n        var geofence = action.payload;\n        var itemIndex = action.index;\n        var delivery_region_list = _toConsumableArray(state.delivery_region_list);\n        delivery_region_list.map(function (item, index) {\n          if (index == itemIndex) {\n            delivery_region_list[index].name = geofence.name;\n          }\n        });\n        return _dispatch(_objectSpread({}, state, {\n          delivery_region_list: delivery_region_list\n        }), true, 'deliveryregionlist');\n      }();\n      break;\n    case REGION_DELETE_SUCCESS:\n      return function () {\n        var data = _objectSpread({}, state.region_list);\n        data.region.splice(action.payload, 1);\n        return _dispatch(_objectSpread({}, state, {\n          region_list: data\n        }), true, 'regionlist');\n      }();\n      break;\n    case BUSINESS_ZONE_LIST_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        business_zone_list: action.payload\n      }), true, 'businesszonelist');\n      break;\n    case ADD_BUSINESS_ZONE_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        business_zone_list: [].concat(_toConsumableArray(state.business_zone_list), [action.payload])\n      }), true, 'businesszonelist');\n      break;\n    case UPDATE_BUSINESS_ZONE_SUCCESS:\n      return function () {\n        var geofence = action.payload;\n        var itemIndex = action.index;\n        var business_zone_list = _toConsumableArray(state.business_zone_list);\n        business_zone_list.map(function (item, index) {\n          if (index == itemIndex) {\n            business_zone_list[index].name = geofence.name;\n          }\n        });\n        return _dispatch(_objectSpread({}, state, {\n          business_zone_list: business_zone_list\n        }), true, 'businesszonelist');\n      }();\n      break;\n    case BUSINESS_ZONE_DELETE_SUCCESS:\n      return function () {\n        var data = _toConsumableArray(state.business_zone_list);\n        data.splice(action.payload, 1);\n        return _dispatch(_objectSpread({}, state, {\n          business_zone_list: data\n        }), true, 'businesszonelist');\n      }();\n      break;\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["_dispatch","CITY_LIST_SUCCESS","REGION_LIST_SUCCESS","REGION_DELETE_SUCCESS","DELIVERY_REGION_LIST_SUCCESS","ADD_NEW_GEOFENCE_SUCCESS","UPDATE_GEOFENCE_SUCCESS","BUSINESS_ZONE_LIST_SUCCESS","ADD_BUSINESS_ZONE_SUCCESS","UPDATE_BUSINESS_ZONE_SUCCESS","BUSINESS_ZONE_DELETE_SUCCESS","INITIAL_STATE","status","city_list","region_list","delivery_region_list","business_zone_list","state","arguments","length","undefined","action","type","_objectSpread","payload","concat","_toConsumableArray","geofence","itemIndex","index","map","item","name","data","region","splice"],"sources":["/home/hardik/gatoes-admin-ui/src/reducers/regions.js"],"sourcesContent":["import {\n  _dispatch,\n  CITY_LIST_SUCCESS,\n  REGION_LIST_SUCCESS,\n  REGION_DELETE_SUCCESS,\n  DELIVERY_REGION_LIST_SUCCESS,\n  ADD_NEW_GEOFENCE_SUCCESS,\n  UPDATE_GEOFENCE_SUCCESS,\n  BUSINESS_ZONE_LIST_SUCCESS,\n  ADD_BUSINESS_ZONE_SUCCESS,\n  UPDATE_BUSINESS_ZONE_SUCCESS,\n  BUSINESS_ZONE_DELETE_SUCCESS\n} from '../actions/regions';\n\nconst INITIAL_STATE = {status: null, city_list: [], region_list:{}, delivery_region_list: [], business_zone_list:[] };\n\nexport default function(state = INITIAL_STATE, action) {\n  switch(action.type) {\n    case CITY_LIST_SUCCESS:\n      return _dispatch({ ...state, city_list: action.payload}, true, 'citylist');\n      break;\n    case REGION_LIST_SUCCESS:\n      return _dispatch({ ...state, region_list: action.payload}, true, 'regionlist');\n      break;\n    case DELIVERY_REGION_LIST_SUCCESS:\n      return _dispatch({ ...state, delivery_region_list: action.payload}, true, 'deliveryregionlist');\n      break;\n    case ADD_NEW_GEOFENCE_SUCCESS:\n      return _dispatch({ ...state, delivery_region_list: [...state.delivery_region_list, action.payload]}, true, 'deliveryregionlist');\n      break;\n    case UPDATE_GEOFENCE_SUCCESS:\n      return (() => {\n        const geofence = action.payload;\n        const itemIndex = action.index;\n        const delivery_region_list = [...state.delivery_region_list];\n        delivery_region_list.map((item, index) => {\n          if(index == itemIndex){\n            delivery_region_list[index].name = geofence.name;\n          }\n        });\n        return _dispatch({ ...state, delivery_region_list}, true, 'deliveryregionlist');\n      })();\n      break;\n    case REGION_DELETE_SUCCESS:\n      return (() => {\n        const data = {...state.region_list};\n        data.region.splice(action.payload, 1);\n        return _dispatch({ ...state, region_list: data}, true, 'regionlist');\n      })();\n      break;\n    case BUSINESS_ZONE_LIST_SUCCESS:\n      return _dispatch({ ...state, business_zone_list: action.payload}, true, 'businesszonelist');\n      break;\n    case ADD_BUSINESS_ZONE_SUCCESS:\n      return _dispatch({ ...state, business_zone_list: [...state.business_zone_list, action.payload]}, true, 'businesszonelist');\n      break;\n    case UPDATE_BUSINESS_ZONE_SUCCESS:\n      return (() => {\n        const geofence = action.payload;\n        const itemIndex = action.index;\n        const business_zone_list = [...state.business_zone_list];\n        business_zone_list.map((item, index) => {\n          if(index == itemIndex){\n            business_zone_list[index].name = geofence.name;\n          }\n        });\n        return _dispatch({ ...state, business_zone_list}, true, 'businesszonelist');\n      })();\n      break;\n      case BUSINESS_ZONE_DELETE_SUCCESS:\n      return (() => {\n        const data = [...state.business_zone_list];\n        data.splice(action.payload, 1);\n        return _dispatch({ ...state, business_zone_list: data}, true, 'businesszonelist');\n      })();\n      break;\n\n\n    default:\n      return state;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}