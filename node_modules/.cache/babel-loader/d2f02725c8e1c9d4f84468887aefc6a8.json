{"ast":null,"code":"import _toConsumableArray from \"/home/hardik/gatoes-admin-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/hardik/gatoes-admin-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { _dispatch, DRIVER_LIST_SUCCESS, DRIVER_DELETE_SUCCESS, RIDER_DOCS_LIST_SUCCESS, ADD_RIDER_DOCS_SUCCESS, UPDATE_RIDER_DOCS_SUCCESS, DRIVER_DOC_DELETE_SUCCESS, DELIVERY_REGION_GROUP_LIST_SUCCESS, REGION_GROUP_DELETE_SUCCESS, DRIVER_GEOMAP_LIST_SUCCESS, UPDATE_RIDER_STATUS_SOCKET } from '../actions/deliveryagent';\nvar INITIAL_STATE = {\n  status: null,\n  driver_list: {},\n  rider_docs: [],\n  driver_region_group: [],\n  driver_map_list: []\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case DRIVER_LIST_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        driver_list: action.payload\n      }), true, 'driverlist');\n      break;\n    case DRIVER_DELETE_SUCCESS:\n      return function () {\n        var data = _objectSpread({}, state.driver_list);\n        data.agent.splice(action.payload, 1);\n        return _dispatch(_objectSpread({}, state, {\n          driver_list: data\n        }), true, 'driverlist');\n      }();\n      break;\n    case RIDER_DOCS_LIST_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        rider_docs: action.payload\n      }), true, 'riderdocs');\n      break;\n    case ADD_RIDER_DOCS_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        rider_docs: [].concat(_toConsumableArray(state.rider_docs), [action.payload])\n      }), true, 'riderdocs');\n      break;\n    case UPDATE_RIDER_DOCS_SUCCESS:\n      return function () {\n        var docs = action.payload;\n        var itemIndex = action.index;\n        var rider_docs = _toConsumableArray(state.rider_docs);\n        rider_docs.map(function (item, index) {\n          if (index == itemIndex) {\n            rider_docs[index].docs_type = docs.docs_type;\n            rider_docs[index].expiry_date = docs.expiry_date;\n          }\n        });\n        return _dispatch(_objectSpread({}, state, {\n          rider_docs: rider_docs\n        }), true, 'riderdocs');\n      }();\n      break;\n    case DRIVER_DOC_DELETE_SUCCESS:\n      return function () {\n        var data = _toConsumableArray(state.rider_docs);\n        data.splice(action.payload, 1);\n        return _dispatch(_objectSpread({}, state, {\n          rider_docs: data\n        }), true, 'riderdocs');\n      }();\n      break;\n    case DELIVERY_REGION_GROUP_LIST_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        driver_region_group: action.payload\n      }), true, 'regiongrouplisting');\n      break;\n    case REGION_GROUP_DELETE_SUCCESS:\n      return function () {\n        var data = _toConsumableArray(state.driver_region_group);\n        data.splice(action.payload, 1);\n        return _dispatch(_objectSpread({}, state, {\n          driver_region_group: data\n        }), true, 'regiongrouplisting');\n      }();\n      break;\n    case DRIVER_GEOMAP_LIST_SUCCESS:\n      return _dispatch(_objectSpread({}, state, {\n        driver_map_list: action.payload\n      }), true, 'drivermaplist');\n      break;\n    case UPDATE_RIDER_STATUS_SOCKET:\n      return function () {\n        var agent_updates = _toConsumableArray(action.payload.agent);\n        if (!state.driver_list.agent) {\n          state.driver_list.agent = [];\n        }\n        var agent = _toConsumableArray(state.driver_list.agent);\n        agent_updates.map(function (nitem) {\n          agent.map(function (item, index) {\n            if (item.driverId == nitem.driverId) {\n              agent[index] = nitem;\n            }\n          });\n        });\n        return _dispatch(_objectSpread({}, state, {\n          driver_list: _objectSpread({}, state.driver_list, {\n            agent: agent\n          })\n        }), true, 'driverlist');\n      }();\n      break;\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["_dispatch","DRIVER_LIST_SUCCESS","DRIVER_DELETE_SUCCESS","RIDER_DOCS_LIST_SUCCESS","ADD_RIDER_DOCS_SUCCESS","UPDATE_RIDER_DOCS_SUCCESS","DRIVER_DOC_DELETE_SUCCESS","DELIVERY_REGION_GROUP_LIST_SUCCESS","REGION_GROUP_DELETE_SUCCESS","DRIVER_GEOMAP_LIST_SUCCESS","UPDATE_RIDER_STATUS_SOCKET","INITIAL_STATE","status","driver_list","rider_docs","driver_region_group","driver_map_list","state","arguments","length","undefined","action","type","_objectSpread","payload","data","agent","splice","concat","_toConsumableArray","docs","itemIndex","index","map","item","docs_type","expiry_date","agent_updates","nitem","driverId"],"sources":["/home/hardik/gatoes-admin-ui/src/reducers/deliveryagent.js"],"sourcesContent":["import {\n  _dispatch,\n  DRIVER_LIST_SUCCESS,\n  DRIVER_DELETE_SUCCESS,\n  RIDER_DOCS_LIST_SUCCESS,\n  ADD_RIDER_DOCS_SUCCESS,\n  UPDATE_RIDER_DOCS_SUCCESS,\n  DRIVER_DOC_DELETE_SUCCESS,\n  DELIVERY_REGION_GROUP_LIST_SUCCESS,\n  REGION_GROUP_DELETE_SUCCESS,\n  DRIVER_GEOMAP_LIST_SUCCESS,\n  UPDATE_RIDER_STATUS_SOCKET\n} from '../actions/deliveryagent';\n\nconst INITIAL_STATE = { status: null, driver_list: {}, rider_docs:[], driver_region_group: [], driver_map_list: [] };\n\nexport default function(state = INITIAL_STATE, action) {\n  switch(action.type) {\n  \tcase DRIVER_LIST_SUCCESS:\n      return _dispatch({ ...state, driver_list: action.payload}, true, 'driverlist');\n      break;\n    case DRIVER_DELETE_SUCCESS:\n      return (() => {\n        const data = {...state.driver_list};\n        data.agent.splice(action.payload, 1);\n        return _dispatch({ ...state, driver_list: data}, true, 'driverlist');\n      })();\n      break;\n    case RIDER_DOCS_LIST_SUCCESS:\n      return _dispatch({ ...state, rider_docs: action.payload}, true, 'riderdocs');\n      break;\n    case ADD_RIDER_DOCS_SUCCESS:\n      return _dispatch({ ...state, rider_docs: [...state.rider_docs, action.payload]}, true, 'riderdocs');\n      break;\n    case UPDATE_RIDER_DOCS_SUCCESS:\n      return (() => {\n        const docs = action.payload;\n        const itemIndex = action.index;\n        const rider_docs = [...state.rider_docs];\n        \n        rider_docs.map((item, index) => {\n          if(index == itemIndex){\n            rider_docs[index].docs_type = docs.docs_type;\n            rider_docs[index].expiry_date = docs.expiry_date;\n          }\n        });\n        return _dispatch({ ...state, rider_docs}, true, 'riderdocs');\n      })();\n      break;\n    case DRIVER_DOC_DELETE_SUCCESS:\n      return (() => {\n        const data = [...state.rider_docs];\n        data.splice(action.payload, 1);\n        return _dispatch({ ...state, rider_docs: data}, true, 'riderdocs');\n      })();\n      break;\n    case DELIVERY_REGION_GROUP_LIST_SUCCESS:\n      return _dispatch({ ...state, driver_region_group: action.payload}, true, 'regiongrouplisting');\n      break;\n    case REGION_GROUP_DELETE_SUCCESS:\n      return (() => {\n        const data = [...state.driver_region_group];\n        data.splice(action.payload, 1);\n        return _dispatch({ ...state, driver_region_group: data}, true, 'regiongrouplisting');\n      })();\n      break;\n    case DRIVER_GEOMAP_LIST_SUCCESS:\n      return _dispatch({ ...state, driver_map_list: action.payload}, true, 'drivermaplist');\n      break;\n\n    case UPDATE_RIDER_STATUS_SOCKET:\n      return(() => {\n        const agent_updates = [...action.payload.agent];\n        if(!state.driver_list.agent){\n          state.driver_list.agent = []\n        }\n        const agent = [...state.driver_list.agent];\n        agent_updates.map((nitem) => {\n          agent.map((item, index) => {\n            if(item.driverId == nitem.driverId){\n              agent[index] = nitem;\n            }\n          });\n        });\n        return _dispatch({ ...state, driver_list: {...state.driver_list, agent: agent}}, true, 'driverlist');\n        \n      })();\n      break;\n\n    default:\n      return state;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}