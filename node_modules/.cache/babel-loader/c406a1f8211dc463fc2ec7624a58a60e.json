{"ast":null,"code":"import _toPath from \"lodash/toPath\";\nfunction createDeleteInWithCleanUp(structure) {\n  var shouldDeleteDefault = function shouldDeleteDefault(structure) {\n    return function (state, path) {\n      return structure.getIn(state, path) !== undefined;\n    };\n  };\n  var deepEqual = structure.deepEqual,\n    empty = structure.empty,\n    getIn = structure.getIn,\n    deleteIn = structure.deleteIn,\n    setIn = structure.setIn;\n  return function (shouldDelete) {\n    if (shouldDelete === void 0) {\n      shouldDelete = shouldDeleteDefault;\n    }\n    var deleteInWithCleanUp = function deleteInWithCleanUp(state, path) {\n      if (path[path.length - 1] === ']') {\n        // array path\n        var pathTokens = _toPath(path);\n        pathTokens.pop();\n        var parent = getIn(state, pathTokens.join('.'));\n        return parent ? setIn(state, path) : state;\n      }\n      var result = state;\n      if (shouldDelete(structure)(state, path)) {\n        result = deleteIn(state, path);\n      }\n      var dotIndex = path.lastIndexOf('.');\n      if (dotIndex > 0) {\n        var parentPath = path.substring(0, dotIndex);\n        if (parentPath[parentPath.length - 1] !== ']') {\n          var _parent = getIn(result, parentPath);\n          if (deepEqual(_parent, empty)) {\n            return deleteInWithCleanUp(result, parentPath);\n          }\n        }\n      }\n      return result;\n    };\n    return deleteInWithCleanUp;\n  };\n}\nexport default createDeleteInWithCleanUp;","map":null,"metadata":{},"sourceType":"module"}